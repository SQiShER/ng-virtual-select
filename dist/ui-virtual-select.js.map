{"version":3,"sources":["ui-virtual-select.js","ui-virtual-select.tpl.js"],"names":[],"mappingsxRA","file":"ui-virtual-select.js","sourcesContent":["'use strict';\n\nangular.module('uiVirtualSelect', [])\n\n  .directive('uiVirtualSelect', ['$timeout', '$document', '$window', function($timeout, $document, $window) {\n    return {\n      restrict: 'E',\n      require: ['uiVirtualSelect', 'ngModel'],\n      templateUrl: 'ui-virtual-select.tpl.html',\n      controller: function() {\n        var lastKnownMousePosition = {\n          x: 0,\n          y: 0\n        };\n        this.items = [];\n        this.search = '';\n        this.activeItemIndex = 0;\n        this.isOpen = false;\n        this.loading = false;\n        this.activate = function(item, $event) {\n          if (!$event) {\n            this.activeItemIndex = item.index;\n          } else if ($event.pageX !== lastKnownMousePosition.x || $event.pageY !== lastKnownMousePosition.y) {\n            // workaround to prevent scripted scrolling from triggering mousemove events\n            lastKnownMousePosition.x = $event.pageX;\n            lastKnownMousePosition.y = $event.pageY;\n            this.activeItemIndex = item.index;\n          }\n        };\n        this.isActive = function(item) {\n          return item.index === this.activeItemIndex;\n        };\n      },\n      controllerAs: 'select',\n      transclude: true,\n      compile: function () {\n        return function(scope, elem, attrs, controllers, $transclude) {\n          var uiVirtualSelectController = controllers[0];\n          var ngModelController = controllers[1];\n\n          function detectItemHeight() {\n            var $sampleItem = $('<div class=\"ui-virtual-select--item\">Text</div>').hide().appendTo(\"body\");\n            var height = $sampleItem.outerHeight();\n            $sampleItem.remove();\n            return height;\n          }\n\n          var ArrowUp = 38;\n          var ArrowDown = 40;\n          var Enter = 13;\n          var Escape = 27;\n\n          var cellsPerPage = 10;\n          var cellHeight = detectItemHeight();\n          var numberOfCells = 3 * cellsPerPage;\n          var scrollTop = 0;\n          var previousSearch = '';\n          var closeOnBlur = true;\n\n          var $searchInput = elem.find('.ui-virtual-select--search-input');\n          var $items = elem.find('.ui-virtual-select--items');\n          var $loadingIndicator = elem.find('.ui-virtual-select--loading-indicator');\n\n          $items.hide();\n\n          var loadingIndicatorTemplate = $transclude().siblings('nvs-loading-indicator')[0];\n          if (loadingIndicatorTemplate) {\n            $loadingIndicator.empty();\n            $loadingIndicator.append(loadingIndicatorTemplate);\n          }\n\n          function searchInputKeydownHandler(event) {\n            var key = event.which;\n            if (key === ArrowUp) {\n              moveUp();\n            } else if (key === ArrowDown) {\n              moveDown();\n            } else if (key === Enter) {\n              onEnter();\n            } else if (key === Escape) {\n              cancel();\n            }\n            scope.$apply();\n          }\n\n          function searchInputKeyupHandler(event) {\n            var search = $(event.target).val();\n            if (search !== previousSearch) {\n              scope.optionsProvider.filter(search);\n              previousSearch = search;\n              uiVirtualSelectController.activeItemIndex = 0;\n              updateItemList();\n              scrollTo(0);\n            }\n            scope.$apply();\n          }\n\n          function searchInputBlurHandler() {\n            if (closeOnBlur) {\n              hideItems();\n              scope.$apply();\n            }\n            $searchInput.off('keydown', searchInputKeydownHandler);\n            $searchInput.off('keyup', searchInputKeyupHandler);\n            $searchInput.off('blur', searchInputBlurHandler);\n            $document.off('mousedown', documentMousedownHandler);\n          }\n\n          function documentMousedownHandler(event) {\n            var targetBelongsToThisComponent = $.contains(elem[0], event.target);\n            if (targetBelongsToThisComponent) {\n              closeOnBlur = false;\n            } else {\n              closeOnBlur = true;\n              cancel();\n            }\n          }\n\n          function moveUp() {\n            var firstVisibleItem = Math.ceil((scrollTop + cellHeight) / cellHeight) - 1;\n            if (uiVirtualSelectController.activeItemIndex > 0) {\n              uiVirtualSelectController.activeItemIndex--;\n              if (uiVirtualSelectController.activeItemIndex < firstVisibleItem) {\n                scrollTo(Math.ceil(scrollTop / cellHeight) - 1);\n              }\n            }\n          }\n\n          function moveDown() {\n            var lastVisibleItem = Math.floor((scrollTop + cellHeight) / cellHeight) + cellsPerPage - 1;\n            if (uiVirtualSelectController.activeItemIndex < scope.optionsProvider.size() - 1) {\n              uiVirtualSelectController.activeItemIndex++;\n              if (uiVirtualSelectController.activeItemIndex >= lastVisibleItem) {\n                scrollTo(Math.floor(scrollTop / cellHeight) + 1);\n              }\n            }\n          }\n\n          function onEnter() {\n            var selectedItem = _.find(uiVirtualSelectController.items, function(item) {\n              return item.index === uiVirtualSelectController.activeItemIndex;\n            });\n            uiVirtualSelectController.select(selectedItem);\n          }\n\n          function scrollTo(index) {\n            scrollTop = Math.max(0, index) * cellHeight;\n            elem.find('.ui-virtual-select--items').scrollTop(scrollTop);\n          }\n\n          function cancel() {\n            clearInput();\n            hideItems();\n            uiVirtualSelectController.activeItemIndex = 0;\n          }\n\n          function clearInput() {\n            elem.find('.ui-virtual-select--search-input').val('');\n            elem.find('.ui-virtual-select--search-input').trigger('blur');\n            scope.optionsProvider.filter('');\n          }\n\n          function indexOfItem(itemToFind) {\n            return _.findIndex(scope.optionsProvider.items, function(item) {\n              return scope.optionsProvider.identity(item) === scope.optionsProvider.identity(itemToFind);\n            });\n          }\n\n          function updateItemList() {\n            var firstItem = Math.max(Math.floor(scrollTop / cellHeight) - cellsPerPage, 0);\n            var lastItem = Math.min(firstItem + numberOfCells, scope.optionsProvider.size());\n            uiVirtualSelectController.items = _.map(scope.optionsProvider.get(firstItem, lastItem), function(value, index) {\n              return {\n                cellId: index,\n                value: value,\n                index: firstItem + index\n              };\n            });\n            elem.find('.ui-virtual-select--items').css({\n              'height': (Math.min(cellsPerPage, scope.optionsProvider.size()) * cellHeight) + 'px',\n              'overflow-y': 'scroll'\n            });\n            elem.find('.ui-virtual-select--canvas').css({\n              'height': (scope.optionsProvider.size() * cellHeight - firstItem * cellHeight) + 'px',\n              'margin-top': (firstItem * cellHeight) + 'px'\n            });\n          }\n\n          elem.find('.ui-virtual-select--items').on('scroll', function() {\n            scrollTop = elem.find('.ui-virtual-select--items').scrollTop();\n            updateItemList();\n            scope.$apply();\n          });\n\n          scope.$on('ui-virtual-select:focus', function() {\n            elem.find('.ui-virtual-select--search-input').focus();\n          });\n\n          function performAfterRender(callback) {\n            if ($window.requestAnimationFrame) {\n              $window.requestAnimationFrame(callback);\n            } else {\n              $timeout(callback, 100);\n            }\n          }\n\n          function adjustScrollPosition() {\n            var scrollIndex = 0;\n            if (uiVirtualSelectController.selectedItem) {\n              scrollIndex = indexOfItem(uiVirtualSelectController.selectedItem);\n            }\n            uiVirtualSelectController.activate({\n              index: scrollIndex\n            });\n            scrollTo(scrollIndex);\n          }\n\n          uiVirtualSelectController.select = function(item) {\n            uiVirtualSelectController.selectedItem = item.value;\n            ngModelController.$setViewValue(uiVirtualSelectController.selectedItem);\n            scope.onSelectCallback({\n              selection: item.value\n            });\n            hideItems();\n            clearInput();\n          };\n\n          uiVirtualSelectController.searchInputFocusHandler = function() {\n            uiVirtualSelectController.loading = true;\n            scope.optionsProvider.load().then(function() {\n              uiVirtualSelectController.loading = false;\n              updateItemList();\n              showItems();\n              scope.$evalAsync(adjustScrollPosition);\n            });\n            $searchInput.on('keydown', searchInputKeydownHandler);\n            $searchInput.on('keyup', searchInputKeyupHandler);\n            $searchInput.on('blur', searchInputBlurHandler);\n            $document.on('mousedown', documentMousedownHandler);\n          };\n\n          function hideItems() {\n            elem.find('.ui-virtual-select--items').css('display', 'none');\n            scope.$evalAsync(function() {\n              uiVirtualSelectController.isOpen = false;\n            });\n            scope.onCloseCallback();\n          }\n\n          function showItems() {\n            elem.find('.ui-virtual-select--items').css('display', 'block');\n            scope.$evalAsync(function() {\n              uiVirtualSelectController.isOpen = true;\n            });\n          }\n\n          uiVirtualSelectController.formatSearchInput = function(item) {\n            if (item) {\n              return scope.optionsProvider.displayText(item);\n            } else {\n              if (scope.optionsProvider.noSelectionText) {\n                return scope.optionsProvider.noSelectionText();\n              } else {\n                return '';\n              }\n            }\n          };\n\n          ngModelController.$render = function() {\n            uiVirtualSelectController.selectedItem = ngModelController.$viewValue;\n          };\n        };\n      },\n      scope: {\n        optionsProvider: '=?uiOptionsProvider',\n        onSelectCallback: '&uiOnSelect',\n        onCloseCallback: '&uiOnClose'\n      }\n    };\n  }]);\n","angular.module(\"uiVirtualSelect\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"ui-virtual-select.tpl.html\",\"<div class=\\\"ui-virtual-select\\\" ng-class=\\\"{open: select.isOpen, loading: select.loading}\\\">\\n\t<input type=\\\"text\\\" class=\\\"ui-virtual-select--search-input\\\" ng-focus=\\\"select.searchInputFocusHandler($event)\\\" placeholder=\\\"{{ select.formatSearchInput(select.selectedItem) }}\\\" />\\n\t<div class=\\\"ui-virtual-select--loading-indicator\\\" ng-show=\\\"select.loading\\\">\\n\t\tLoading...\\n\t</div>\\n\t<div class=\\\"ui-virtual-select--items\\\">\\n\t\t<div class=\\\"ui-virtual-select--canvas\\\">\\n\t\t\t<div class=\\\"ui-virtual-select--item\\\" ng-repeat=\\\"item in select.items track by item.cellId\\\" ng-class=\\\"{active: select.isActive(item)}\\\" ng-mousemove=\\\"select.activate(item, $event)\\\" ng-click=\\\"select.select(item)\\\">{{ optionsProvider.displayText(item.value) }}</div>\\n\t\t</div>\\n\t</div>\\n</div>\\n\");}]);"],"sourceRoot":"/source/"}