{"version":3,"sources":["ui-virtual-select.js","ui-virtual-select.tpl.js"],"names":[],"mappingsvUA","file":"ui-virtual-select.js","sourcesContent":["'use strict';\n\nangular.module('uiVirtualSelect', [])\n\n  .directive('uiVirtualSelect', ['$timeout', '$document', function($timeout, $document) {\n\n    function controllerFn() {\n      var self = this;\n      self.items = [];\n      self.search = '';\n      self.isOpen = false;\n      self.isLoading = false;\n      self.formatSearchInput = function(item) {\n        if (item) {\n          return self.optionsProvider.displayText(item);\n        } else {\n          if (self.optionsProvider.noSelectionText) {\n            return self.optionsProvider.noSelectionText();\n          } else {\n            return '';\n          }\n        }\n      };\n    }\n\n    function linkFn(scope, elem, attrs, controllers, $transclude) {\n      var uiVirtualSelectController = controllers[0];\n      var ngModelController = controllers[1];\n\n      function detectItemHeight() {\n        var $sampleItem = $('<div class=\"ui-virtual-select--item\">Text</div>').hide().appendTo(\"body\");\n        var height = $sampleItem.outerHeight();\n        $sampleItem.remove();\n        return height;\n      }\n\n      var Keys = {\n        ArrowUp: 38,\n        ArrowDown: 40,\n        Enter: 13,\n        Escape: 27\n      };\n\n      var options = {\n        itemHeight: detectItemHeight(),\n        itemsVisible: 10,\n        itemsRendered: 30\n      };\n\n      var lastKnownMousePosition = {\n        x: 0,\n        y: 0\n      };\n      var scrollTop = 0;\n      var previousSearch = '';\n      var clickedOutsideElement = true;\n      var activeItemIndex = 0;\n\n      var $select = elem.find('.ui-virtual-select');\n      var $searchInput = elem.find('.ui-virtual-select--search-input');\n      var $items = elem.find('.ui-virtual-select--items').hide();\n      // var $scrollContainer = elem.find('.ui-virtual-select--scroll-container');\n      var $canvas = elem.find('.ui-virtual-select--canvas');\n      var $loadingIndicator = elem.find('.ui-virtual-select--loading-indicator').hide();\n\n      var loadingIndicatorTemplate = $transclude().siblings('nvs-loading-indicator')[0];\n      if (loadingIndicatorTemplate) {\n        $loadingIndicator.empty();\n        $loadingIndicator.append(loadingIndicatorTemplate);\n      }\n\n      $searchInput.on('focus', searchInputFocusHandler);\n\n      function searchInputFocusHandler() {\n        $loadingIndicator.show();\n        $select.addClass('loading');\n        uiVirtualSelectController.optionsProvider.load().then(function() {\n          $loadingIndicator.hide();\n          $select.removeClass('loading');\n          updateItemList();\n          showItems();\n          scope.$evalAsync(adjustScrollPosition);\n        });\n        $searchInput.on('blur', searchInputBlurHandler);\n        $searchInput.on('keyup', searchInputKeyupHandler);\n        $searchInput.on('keydown', searchInputKeydownHandler);\n        $document.on('mousedown', documentMousedownHandler);\n      }\n\n      function searchInputBlurHandler() {\n        if (clickedOutsideElement) {\n          clearSearchInput(true);\n          hideItems();\n        }\n        $searchInput.off('keydown', searchInputKeydownHandler);\n        $searchInput.off('keyup', searchInputKeyupHandler);\n        $searchInput.off('blur', searchInputBlurHandler);\n        $document.off('mousedown', documentMousedownHandler);\n      }\n\n      function activatePreviousItem() {\n        var firstVisibleItem = Math.ceil((scrollTop + options.itemHeight) / options.itemHeight) - 1;\n        if (activeItemIndex > 0) {\n          activeItemIndex--;\n          updateItemList();\n          if (activeItemIndex < firstVisibleItem) {\n            scrollTo(Math.ceil(scrollTop / options.itemHeight) - 1);\n          }\n        }\n      }\n\n      function activateNextItem() {\n        var lastVisibleItem = Math.floor((scrollTop + options.itemHeight) / options.itemHeight) + options.itemsVisible -\n          1;\n        if (activeItemIndex < uiVirtualSelectController.optionsProvider.size() - 1) {\n          activeItemIndex++;\n          updateItemList();\n          if (activeItemIndex >= lastVisibleItem) {\n            scrollTo(Math.floor(scrollTop / options.itemHeight) + 1);\n          }\n        }\n      }\n\n      function selectActiveItem() {\n        selectItem(activeItemIndex);\n      }\n\n      function cancel() {\n        clearSearchInput();\n        hideItems();\n        activeItemIndex = 0;\n      }\n\n      function searchInputKeydownHandler(event) {\n        switch (event.which) {\n          case Keys.ArrowUp:\n            return activatePreviousItem();\n          case Keys.ArrowDown:\n            return activateNextItem();\n          case Keys.Enter:\n            return selectActiveItem();\n          case Keys.Escape:\n            return cancel();\n          default:\n            clickedOutsideElement = true;\n        }\n      }\n\n      function searchInputKeyupHandler(event) {\n        var search = $(event.target).val();\n        if (search !== previousSearch) {\n          uiVirtualSelectController.optionsProvider.filter(search);\n          previousSearch = search;\n          activeItemIndex = 0;\n          updateItemList();\n          scrollTo(0);\n        }\n      }\n\n      function documentMousedownHandler(event) {\n        var targetBelongsToThisComponent = $.contains(elem[0], event.target);\n        if (targetBelongsToThisComponent) {\n          clickedOutsideElement = false;\n        } else {\n          clickedOutsideElement = true;\n        }\n      }\n\n      function scrollTo(index) {\n        scrollTop = Math.max(0, index) * options.itemHeight;\n        $items.scrollTop(scrollTop);\n      }\n\n      function clearSearchInput(omitBlur) {\n        uiVirtualSelectController.optionsProvider.filter('');\n        $searchInput.val('');\n        if (!omitBlur) {\n          $searchInput.trigger('blur');\n        }\n      }\n\n      function indexOfItem(itemToFind) {\n        var identity = uiVirtualSelectController.optionsProvider.identity(itemToFind);\n        return _.findIndex(uiVirtualSelectController.optionsProvider.items, function(item) {\n          return uiVirtualSelectController.optionsProvider.identity(item) === identity;\n        });\n      }\n\n      function itemMouseMoveHandler(event) {\n        // workaround to prevent scripted scrolling from triggering mousemove events\n        if (event.pageX !== lastKnownMousePosition.x || event.pageY !== lastKnownMousePosition.y) {\n          activeItemIndex = $(this).data('index');\n          updateItemElements(uiVirtualSelectController.items);\n        }\n      }\n\n      function updateItemElements(items) {\n        var $itemSet = $canvas.children('.ui-virtual-select--item');\n        var $currentlyActiveItem = $itemSet.filter('.active');\n        _.each(items, function(item, index) {\n          var itemElement = $canvas.children('.ui-virtual-select--item').eq(index);\n          if (itemElement.length === 0) {\n            itemElement = $(document.createElement('div')).addClass('ui-virtual-select--item');\n            itemElement.appendTo($canvas);\n            itemElement.on('mousemove', itemMouseMoveHandler);\n            itemElement.on('click', function() {\n              var itemIndex = $(this).data('index');\n              selectItem(itemIndex);\n            });\n          }\n          var itemIdentity = uiVirtualSelectController.optionsProvider.identity(item.value);\n          if (itemIdentity !== itemElement.data('identity')) {\n            itemElement.data('identity', itemIdentity);\n            itemElement.data('index', item.index);\n            itemElement.data('item', item.value);\n            itemElement.text(uiVirtualSelectController.optionsProvider.displayText(item.value));\n          }\n          if (item.index === activeItemIndex && !itemElement.hasClass('active')) {\n            $currentlyActiveItem.removeClass('active');\n            itemElement.addClass('active');\n          }\n        });\n\n        // remove unused elements\n        $canvas.children('.ui-virtual-select--item').slice(items.length).remove();\n      }\n\n      function selectItem(index) {\n        var itemModel = _.find(uiVirtualSelectController.items, {\n          index: index\n        });\n        var item = itemModel.value;\n        ngModelController.$setViewValue(item);\n        uiVirtualSelectController.selectedItem = item;\n        uiVirtualSelectController.onSelectCallback({\n          selection: item\n        });\n        clearSearchInput();\n        hideItems();\n      }\n\n      function updateItemList() {\n        var itemHeight = options.itemHeight,\n          optionsProvider = uiVirtualSelectController.optionsProvider,\n          firstItem = Math.max(Math.floor(scrollTop / itemHeight) - options.itemsVisible, 0),\n          lastItem = firstItem + options.itemsRendered,\n          itemsToRender = optionsProvider.get(firstItem, lastItem),\n          totalItemCount = optionsProvider.size();\n        uiVirtualSelectController.items = _.map(itemsToRender, function(value, index) {\n          return {\n            index: firstItem + index,\n            value: value\n          };\n        });\n        updateItemElements(uiVirtualSelectController.items);\n        $items.css({\n          'height': (Math.min(options.itemsVisible, totalItemCount) * itemHeight) + 'px',\n          'overflow-y': 'scroll'\n        });\n        var distanceFromTop = firstItem * itemHeight;\n        var heightOfAllItems = totalItemCount * itemHeight;\n        $canvas.css({\n          'height': (heightOfAllItems - distanceFromTop) + 'px',\n          'margin-top': distanceFromTop + 'px'\n        });\n      }\n\n      $items.on('scroll', _.throttle(function itemsScrollHandler() {\n        scrollTop = $items.scrollTop();\n        updateItemList();\n      }, 10));\n\n      $canvas.on('mousemove', _.throttle(function canvasMouseMoveHandler(event) {\n        lastKnownMousePosition.x = event.pageX;\n        lastKnownMousePosition.y = event.pageY;\n      }, 50));\n\n      scope.$on('ui-virtual-select:focus', function() {\n        $searchInput.focus();\n      });\n\n      function adjustScrollPosition() {\n        var scrollIndex = 0;\n        if (uiVirtualSelectController.selectedItem) {\n          scrollIndex = indexOfItem(uiVirtualSelectController.selectedItem);\n        }\n        activeItemIndex = scrollIndex;\n        updateItemList();\n        scrollTo(scrollIndex);\n      }\n\n      function hideItems() {\n        $items.hide();\n        scope.$evalAsync(function() {\n          uiVirtualSelectController.isOpen = false;\n        });\n        uiVirtualSelectController.onCloseCallback();\n      }\n\n      function showItems() {\n        $items.show();\n        scope.$evalAsync(function() {\n          uiVirtualSelectController.isOpen = true;\n        });\n      }\n\n      ngModelController.$render = function() {\n        uiVirtualSelectController.selectedItem = ngModelController.$viewValue;\n      };\n    }\n\n    return {\n      restrict: 'E',\n      require: ['uiVirtualSelect', 'ngModel'],\n      templateUrl: 'ui-virtual-select.tpl.html',\n      controller: controllerFn,\n      controllerAs: 'select',\n      transclude: true,\n      link: linkFn,\n      bindToController: true,\n      scope: {\n        optionsProvider: '=?uiOptionsProvider',\n        onSelectCallback: '&uiOnSelect',\n        onCloseCallback: '&uiOnClose'\n      }\n    };\n  }]);\n","angular.module(\"uiVirtualSelect\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"ui-virtual-select.tpl.html\",\"<div class=\\\"ui-virtual-select\\\" ng-class=\\\"{open: select.isOpen}\\\">\\n  <input type=\\\"text\\\" class=\\\"ui-virtual-select--search-input\\\" placeholder=\\\"{{ select.formatSearchInput(select.selectedItem) }}\\\" />\\n  <div class=\\\"ui-virtual-select--loading-indicator\\\">\\n    Loading...\\n  </div>\\n  <div class=\\\"ui-virtual-select--items\\\">\\n    <div class=\\\"ui-virtual-select--canvas\\\"></div>\\n  </div>\\n</div>\");}]);"],"sourceRoot":"/source/"}