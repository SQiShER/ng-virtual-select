'use strict';

class VirtualSelectComponentObject {
  constructor(element) {
    this.element = element;
  }
  get containerClass() {
    return 'ui-virtual-select';
  }
  get container() {
    return this.element.find(`.${this.containerClass}`);
  }
  get itemsClass() {
    return 'ui-virtual-select--items';
  }
  get items() {
    return this.element.find(`.${this.itemsClass}`);
  }
  get loadingIndicatorClass() {
    return 'ui-virtual-select--loading-indicator';
  }
  get loadingIndicator() {
    return this.element.find(`.${this.loadingIndicatorClass}`);
  }
  get searchInputClass() {
    return 'ui-virtual-select--search-input';
  }
  get searchInput() {
    return this.element.find(`.${this.searchInputClass}`);
  }
  get canvasClass() {
    return 'ui-virtual-select--canvas';
  }
  get canvas() {
    return this.element.find(`.${this.canvasClass}`);
  }
}

describe.skip(`$.fn.virtualselect`, () => {
  let element;
  let componentObject;

  beforeEach(() => {
    element = $(`<div class="test-container"></div>`);
    element.appendTo(document.body);
    componentObject = new VirtualSelectComponentObject(element);
  });

  afterEach(() => {
    element.remove();
  });

  it(`assigns an instance of the virtual select plugin to the element`, () => {
    expect(element.data(`plugin_virtualselect`)).to.be.undefined;
    element.virtualselect();
    expect(element.data(`plugin_virtualselect`)).to.be.an('object');
  });

  it(`inserts the template as body of the element it is called on`, () => {
    const descendants = [
      `.${componentObject.containerClass}`,
      `.${componentObject.searchInputClass}`,
      `.${componentObject.loadingIndicatorClass}`,
      `.${componentObject.itemsClass}`,
      `.${componentObject.canvasClass}`,
    ];
    element.virtualselect();
    descendants.forEach((descendant) => {
      element.should.have.descendants(descendant);
    });
  });

  it(`should initially hide loading indicator`, () => {
    element.virtualselect();
    expect(componentObject.loadingIndicator).not.to.be.visible;
  });

  it(`should initially hide items`, () => {
    element.virtualselect();
    expect(componentObject.items).not.to.be.visible;
  });

  describe(`when the search input gains focus`, () => {
    let dataProvider;
    beforeEach(() => {
      dataProvider = {
        load: sinon.stub().returns(new Promise(() => {
        })),
      };
      element.virtualselect({
        dataProvider,
      });
    });

    it(`should show loading indicator`, () => {
      componentObject.searchInput.focus();
      expect(componentObject.loadingIndicator).to.be.visible;
    });

    it(`should add 'loading' class to container`, () => {
      componentObject.searchInput.focus();
      expect(componentObject.container).to.have.class('loading');
    });

    it(`should call 'load' function of data provider`, () => {
      componentObject.searchInput.focus();
      expect(dataProvider.load).to.have.been.called;
    });

    describe(`and loading was successful`, () => {
      beforeEach(() => {
        dataProvider.load.returns(Promise.resolve());
        dataProvider.get = sinon.stub().returns([]);
      });

      it(`should hide loading indicator`, (done) => {
        componentObject.searchInput.focus();
        setTimeout(() => {
          expect(componentObject.loadingIndicator).to.be.hidden;
          done();
        }, 1);
      });

      it(`should remove 'loading' class from container`, (done) => {
        componentObject.searchInput.focus();
        setTimeout(() => {
          expect(componentObject.container).not.to.have.class('loading');
          done();
        }, 1);
      });

      it(`refocussing the search input should not call 'load' function of data provider again`, (done) => {
        componentObject.searchInput.focus();
        expect(dataProvider.load).to.have.been.calledOnce;
        setTimeout(() => {
          componentObject.searchInput.blur();
          componentObject.searchInput.focus();
          expect(dataProvider.load).to.have.been.calledOnce;
          done();
        }, 1);
      });

      it(`should show the items`, (done) => {
        componentObject.searchInput.focus();
        setTimeout(() => {
          expect(componentObject.items).to.be.visible;
          done();
        }, 1);
      });

      it(`should add 'open' class to the container`, (done) => {
        componentObject.searchInput.focus();
        setTimeout(() => {
          expect(componentObject.container).to.have.class('open');
          done();
        }, 1);
      });

      it(`should render the first 30 items`, (done) => {
        componentObject.searchInput.focus();
        setTimeout(() => {
          expect(dataProvider.get).to.have.been.calledWith(0, 30);
          done();
        }, 1);
      });
    });
  });

  describe(`given search input has focus and items have been successfully loaded`, () => {
    let dataProvider;
    beforeEach((done) => {
      const items = [];
      for (let i = 0; i < 100; i++) {
        items.push(i);
      }
      dataProvider = {
        items,
        load: sinon.stub().returns(Promise.resolve()),
        get(firstIndex, endIndex) {
          return this.items.slice(firstIndex, endIndex);
        },
        identity(item) {
          return item;
        },
        displayText(item) {
          return `Item ${item}`;
        },
      };
      element.virtualselect({
        dataProvider,
        itemHeight: 30,
      });
      componentObject.searchInput.focus();
      setTimeout(done, 1);
    });
    it(`should render no more than the maximum number of rendered items`, () => {
      expect(componentObject.canvas.find('.ui-virtual-select--item')).to.have.length(30);
    });
    it(`should set the proper item text`, () => {
      expect(componentObject.canvas.find('.ui-virtual-select--item:eq(0)')).to.have.text('Item 0');
    });
    it(`should set the item text as title attribute`, () => {
      expect(componentObject.canvas.find('.ui-virtual-select--item:eq(0)')).to.have.attr('title', 'Item 0');
    });
    it(`should add the 'active' class to the active item`, () => {
      expect(componentObject.canvas.find('.ui-virtual-select--item:eq(0)')).to.have.class('active');
      expect(componentObject.canvas.find('.ui-virtual-select--item:eq(1)')).not.to.have.class('active');
    });
    it(`should adjust 'canvas' height to fit the total number of items`, () => {
      expect(componentObject.canvas).to.have.css(`height`, '3000px');
      expect(componentObject.canvas).to.have.css(`margin-top`, '0px');
    });
    it(`should adjust 'items' height to fit the maximum number of visible items`, () => {
      expect(componentObject.items).to.have.css(`height`, '300px');
    });
    it(`should scroll to the active item`);
    it(`should remove rendered items from the DOM when necessary`);
  });
});

describe('directive', () => {
  let Context;

  class MockOptionsProvider {
    constructor($q) {
      this.availableItems = [];
      this.items = [];
      this.deferredLoad = $q.defer();
    }
    load() {
      return this.deferredLoad.promise;
    }
    resolveLoad(itemCount) {
      itemCount = itemCount || 100;
      class Item {
        constructor(id) {
          this.id = id;
          this.firstname = `First${id}`;
          this.lastname = `Last${id}`;
        }
      }
      const items = [];
      for (let i = 0; i < itemCount; i++) {
        items.push(new Item(i));
      }
      this.availableItems = items;
      this.items = items;
      this.deferredLoad.resolve();
    }
    rejectLoad() {
      this.deferredLoad.reject();
    }
    get(firstItem, lastItem) {
      return this.items.slice(firstItem, lastItem);
    }
    // filter(search) {}
    size() {
      return this.items.length;
    }
    identity(item) {
      return item && item.id;
    }
    displayText(item) {
      if (!item) {
        return '';
      }
      const {firstname, lastname} = item;
      return `${lastname}, ${firstname}`;
    }
    noSelectionText() {
      return `none`;
    }
  }

  beforeEach(module('uiVirtualSelect'));
  beforeEach(module('ui-virtual-select.tpl.html'));
  beforeEach(inject(($compile, $rootScope, $q) => {
    Context = {
      '$compile': $compile,
      '$rootScope': $rootScope,
      '$q': $q,
    };
  }));

  afterEach(() => {
    Context.$element.remove();
    Context.$style.remove();
  });

  function createDirective({selection = null, optionsProvider = {}} = {}) {
    const styleElement = $(`<style type="text/css">
    .ui-virtual-select--item {
      line-height: 16px;
      padding: 7px 0;
    }
    </style>`);
    $(document.head).append(styleElement);
    const $element = angular.element('<ui-virtual-select ng-model="data.selection" ui-options-provider="data.optionsProvider" ui-on-loaded="data.loadCallback()"></ui-virtual-select>');
    $(document.body).append($element);
    const $scope = Context.$rootScope.$new();
    $scope.data = {
      selection: selection,
      optionsProvider: optionsProvider,
      loadCallback: function loadCallback() {},
    };
    sinon.stub($scope.data, 'loadCallback');
    Context.$compile($element)($scope);
    Context.$element = $element;
    Context.$style = styleElement;
    Context.$scope = $scope;
    Context.$rootScope.$digest();
  }

  describe('in any case', () => {
    beforeEach(() => {
      createDirective();
    });
    it('container element should exist', () => {
      expect(Context.$element).to.have.descendants('.ui-virtual-select');
    });
    it('search input should display the selected value as placeholder text', () => {
      const placeholderText = 'I always wanted to be a placeholder text!';
      Context.$rootScope.$apply(() => {
        Context.$scope.data.selection = {
          name: placeholderText,
        };
        Context.$scope.data.optionsProvider = {
          displayText: function displayText(item) {
            return item.name;
          },
        };
      });
      expect(Context.$element.find('.ui-virtual-select--search-input')).to.have.attr('placeholder', placeholderText);
    });
  });

  describe('when search input has no focus,', () => {
    beforeEach(() => {
      createDirective();
    });
    it(`container element should not have class "open"`, () => {
      expect(Context.$element.find('.ui-virtual-select')).not.to.have.class('open');
    });
    it(`items should be hidden`, () => {
      expect(Context.$element.find('.ui-virtual-select--items')).not.to.be.visible;
    });
    it(`loading indicator should not exist`, () => {
      expect(Context.$element.find('.ui-virtual-select--loading-indicator')).to.exist;
    });
  });

  describe(`when search input gains focus`, () => {
    beforeEach(() => {
      createDirective();
    });
    beforeEach(inject(($q) => {
      Context.$scope.data.optionsProvider = new MockOptionsProvider($q);
      sinon.spy(Context.$scope.data.optionsProvider, 'load');
      Context.$rootScope.$digest();
      Context.$element.find('.ui-virtual-select--search-input').focus();
    }));
    it(`"load" function of options provider should be called`, () => {
      expect(Context.$scope.data.optionsProvider.load).to.have.been.called;
    });
    it(`loading indicator should only be visible while "load" promise is pending`, () => {
      expect(Context.$element.find('.ui-virtual-select--loading-indicator')).to.be.visible;
      Context.$scope.data.optionsProvider.resolveLoad(10);
      Context.$rootScope.$digest();
      expect(Context.$element.find('.ui-virtual-select--loading-indicator')).not.to.be.visible;
    });
    it(`items should be visible once options have been loaded`, () => {
      Context.$scope.data.optionsProvider.resolveLoad(10);
      Context.$rootScope.$digest();
      expect(Context.$element.find('.ui-virtual-select--items')).to.be.visible;
    });
  });

  describe(`option list:`, () => {
    beforeEach(() => {
      createDirective();
      Context.$scope.data.optionsProvider = new MockOptionsProvider(Context.$q);
      Context.$scope.$digest();
      Context.$element.find('.ui-virtual-select--search-input').focus();
    });

    describe(`given no options`, () => {
      beforeEach(() => {
        Context.$scope.data.optionsProvider.resolveLoad(0);
        Context.$scope.$digest();
      });
      it(`.ui-virtual-select--items should display "empty text"`);
    });

    describe(`given less than 10 options`, () => {
      const itemHeight = 30;
      const numberOfItems = 5;
      beforeEach(() => {
        Context.$scope.data.optionsProvider.resolveLoad(numberOfItems);
        Context.$scope.$digest();
      });
      it(`.ui-virtual-select--items height should be the number of items times the (computed) height of a single item`, () => {
        expect(Context.$element.find('.ui-virtual-select--items')).to.have.css('height', (numberOfItems * itemHeight) + 'px');
      });
      it(`.ui-virtual-select--canvas height should be the number of items times the (computed) height of a single item`, () => {
        expect(Context.$element.find('.ui-virtual-select--canvas')).to.have.css('height', (numberOfItems * itemHeight) + 'px');
      });
    });

    describe(`given more than 10 options`, () => {
      const itemHeight = 30;
      const numberOfItems = 50;
      beforeEach(() => {
        Context.$scope.data.optionsProvider.resolveLoad(numberOfItems);
        Context.$scope.$digest();
      });
      it(`.ui-virtual-select--items height should be 10 times the (computed) height of a single item`, () => {
        expect(Context.$element.find('.ui-virtual-select--items')).to.have.css('height', (10 * itemHeight) + 'px');
      });
      it(`.ui-virtual-select--canvas height should be the number of all items times the (computed) height of a single item`, () => {
        expect(Context.$element.find('.ui-virtual-select--canvas')).to.have.css('height', (numberOfItems * itemHeight) + 'px');
      });
      describe(`when scroll position moves so far that more than 10 upper items moved out of view`, () => {
        beforeEach(() => {
          Context.$element.find('.ui-virtual-select--items').scrollTop(15 * itemHeight);
          Context.$element.find('.ui-virtual-select--items').triggerHandler('scroll');
        });
        it(`.ui-virtual-select--canvas margin-top should equal the computed height of all items that have been scrolled out of view`, () => {
          expect(Context.$element.find('.ui-virtual-select--canvas')).to.have.css('margin-top', (5 * itemHeight) + 'px');
        });
      });
    });
  });

  describe(`search input:`, () => {
    let optionsProvider;
    const noSelectionText = 'no selection text';
    beforeEach(() => {
      optionsProvider = new MockOptionsProvider(Context.$q);
      createDirective({
        optionsProvider: optionsProvider,
      });
      sinon.stub(optionsProvider, 'displayText');
      sinon.stub(optionsProvider, 'noSelectionText').returns(noSelectionText);
      Context.$scope.$digest();
    });
    describe(`given no initial selection`, () => {
      it(`displayText should not be called`, () => {
        expect(Context.$scope.data.optionsProvider.displayText).not.to.have.been.called;
      });
      it(`placeholder should contain text from optionsProvider.noSelectionText()`, () => {
        expect(Context.$scope.data.optionsProvider.noSelectionText).to.have.been.called;
        expect(Context.$element.find('.ui-virtual-select--search-input')).to.have.attr('placeholder', noSelectionText);
      });
      it(`placeholder should be empty if optionsProvider.noSelectionText() does not exist`, () => {
        optionsProvider.noSelectionText = null;
        Context.$scope.$digest();
        expect(Context.$element.find('.ui-virtual-select--search-input')).to.have.attr('placeholder', '');
      });
    });
  });

  describe('loading indicator', () => {
    let optionsProvider;
    beforeEach(inject(($q) => {
      optionsProvider = new MockOptionsProvider($q);
      createDirective({
        optionsProvider: optionsProvider,
      });
      Context.$scope.$digest();
    }));
    it(`triggered via event`, () => {
      sinon.spy(optionsProvider, 'load');
      Context.$scope.$broadcast('ui-virtual-select:load');
      expect(optionsProvider.load).to.have.been.calledOnce;
      optionsProvider.resolveLoad(10);
      Context.$scope.$digest();
      Context.$element.find('.ui-virtual-select--search-input').focus();
      expect(optionsProvider.load).to.have.been.calledOnce;
      Context.$scope.$digest();
      expect(Context.$scope.data.loadCallback).to.have.been.calledOnce;
    });
    it(`triggered via focus`, () => {
      sinon.spy(optionsProvider, 'load');
      Context.$element.find('.ui-virtual-select--search-input').focus();
      expect(optionsProvider.load).to.have.been.calledOnce;
      Context.$scope.$digest();
      expect(Context.$scope.data.loadCallback).not.to.have.been.called;
      optionsProvider.resolveLoad(10);
      Context.$scope.$digest();
      expect(Context.$scope.data.loadCallback).to.have.been.calledOnce;
    });
  });
});
